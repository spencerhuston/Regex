#ifndef REGEX_H
#define REGEX_H

#include <ctype.h>
#include <cstdint>

#include <string>
#include <vector>
#include <stack>

#include <iostream>

#include <memory>

#include "Edge.h"
#include "State.h"
#include "Fragment.h"

class Regex
{
	private:
		// 0 *
		// 1 +
		// 2 ?
		// 3 |
		// 4 [a-zA-Z0-9]
		// 5 concatenation: ab = a then b
		// 6 another expression
		enum Ops { STAR, PLUS, QUESTION, 
			   OR, CHARACTER, CAT };

		//Constructed during scanning, used during parsing to make NFA
		struct Token
		{
			//indicates type of token
			Ops op;
			
			//character that generated the token
			uint8_t c;
			
			//used to convert from raw ascii since all characters are stored as char
			bool number;

			//Only used if the token is an EXPRESSION type
			//generated by scanning a (, the vector is not a part of the same token stream that this token itself is a part of
			std::vector<Token> expression;
		};

		//token stream generated during scanning		
		std::vector<Token> _tokens;

	public:
		std::vector<Token> scan(std::string expression);
		std::shared_ptr<State> parse(std::vector<Token> tokens);
		void run(std::shared_ptr<State> start, std::string str);

		//helper methods
		void add_states(std::vector< std::shared_ptr<State> > & nstates, std::shared_ptr<Edge> e);
		bool contains(const std::vector<uint8_t> matched, const uint8_t c);
		void print_scan(std::vector<Token> tokens);
		void print_nfa(std::shared_ptr<State> start);

		inline void set_tokens(std::vector<Token> tokens)
		{ _tokens = tokens; }

		inline std::vector<Token> get_tokens()
		{ return _tokens; }
};

#endif
